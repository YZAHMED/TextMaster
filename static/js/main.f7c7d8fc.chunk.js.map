{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextBox.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","darkModeBtn","setDarkModeBtn","useState","style","setStyle","color","backgroundColor","React","createElement","Fragment","className","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","handleDarkModeClick","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","home","toggleMode","role","htmlFor","TextBox","text","setText","newText","toUpperCase","newTextLower","toLowerCase","heading","onChange","e","target","value","rows","callAlert","str","newStr","i","length","inverseCase","copyToClipboard","textArea","document","getElementById","select","navigator","clipboard","writeText","setSelectionRange","trim","split","filter","word","Alert","message","charAt","slice","capitalize","defaultProps","App","setMode","mAlert","setMAlert","setTimeout","Router","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.f7c7d8fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function About() {\r\n  \r\n    const [darkModeBtn, setDarkModeBtn] = useState(\"Enable Dark Mode ‚òùÔ∏è\")\r\n   const [style, setStyle] = useState({color: \"black\",\r\n    backgroundColor: \"white\"})\r\n\r\n   const handleDarkModeClick = () => {\r\n  style.backgroundColor === \"white\"\r\n    ? (() => {\r\n        setStyle({\r\n          color: \"white\",\r\n          backgroundColor: \"black\"\r\n        });\r\n        setDarkModeBtn(\"Enable Light Mode üëä\");\r\n  \r\n      })()\r\n    : (() => {\r\n        setStyle({\r\n          color: \"black\",\r\n          backgroundColor: \"white\"\r\n        });\r\n        setDarkModeBtn(\"Enable Dark Mode üëá\");\r\n        \r\n        \r\n      })();\r\n};\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    \r\n    <div className='container ' style={style}>\r\n        <h1 className='text-center'>About The App</h1>\r\n      <div className=\"accordion accordion-flush border\" id=\"accordionFlushExample\" >\r\n  <div className=\"accordion-item\" style={style} >\r\n    <h2 className=\"accordion-header\">\r\n      <button style={style} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseOne\" aria-expanded=\"false\" aria-controls=\"flush-collapseOne\">\r\n        üõ† What Does This Website Do?\r\n      </button>\r\n    </h2>\r\n    <div id=\"flush-collapseOne\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n      <div className=\"accordion-body\">This website allows you to manipulate and analyze text in various ways. You can convert text to uppercase or lowercase, remove extra spaces, count words and characters, copy text to the clipboard, and much more. It's a handy tool for writers, developers, and anyone working with text.</div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\"style={style} >\r\n    <h2 className=\"accordion-header\">\r\n      <button style={style} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseTwo\" aria-expanded=\"false\" aria-controls=\"flush-collapseTwo\">\r\n        üîç Key Features\r\n      </button>\r\n    </h2>\r\n    <div id=\"flush-collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n      <div className=\"accordion-body\">Convert text to uppercase or lowercase\r\n\r\nRemove unnecessary spaces\r\n\r\nCount words and characters instantly\r\n\r\nPreview and edit your text live\r\n\r\nCopy the output directly to your clipboard\r\nThis tool is designed to be fast, simple, and user-friendly for everyday text processing tasks.</div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={style}>\r\n    <h2 className=\"accordion-header\">\r\n      <button style={style} className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#flush-collapseThree\" aria-expanded=\"false\" aria-controls=\"flush-collapseThree\">\r\n        ‚ùì Who Is This For?\r\n      </button>\r\n    </h2>\r\n    <div id=\"flush-collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionFlushExample\">\r\n      <div className=\"accordion-body\">This tool is perfect for students, content creators, developers, and anyone who deals with text. Whether you're drafting a blog post, cleaning up input for code, or editing a message, this site helps you format and analyze text with ease.</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button className='btn btn-primary my-3 mx-2' onClick={handleDarkModeClick}>{darkModeBtn}</button>\r\n    </div>\r\n    \r\n    \r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.home}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n        \r\n\r\n      </ul>\r\n        <div className={`form-check form-switch text-${props.mode === \"light\"? \"dark\": \"light\"}`}>\r\n    <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n     </div>\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  home: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'To be Added',\r\n    home: 'I am going to be added'\r\n}","import { useState } from 'react'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function TextBox(props) {\r\n    const [text, setText] = useState(\"\")\r\n   \r\n    const copyToClipboard = () => {\r\n      const textArea = document.getElementById(\"exampleFormControlTextarea1\");\r\n      textArea.select();\r\n      navigator.clipboard.writeText(textArea.value);\r\n      textArea.setSelectionRange(0, 999999)\r\n      props.callAlert(\"success\", \"Copied To Clipboard\")\r\n      \r\n    }\r\n   \r\n    \r\n\r\n\r\n    let newText = text.toUpperCase();\r\n    let newTextLower = text.toLowerCase();\r\n    function inverseCase(str){\r\n      let  newStr = \"\";\r\n      for (let i = 0; i < str.length; i++){\r\n        if (str[i] >= \"a\" && str[i] <= \"z\"){\r\n          newStr = newStr + str[i].toUpperCase();\r\n        } else if (str[i] >= \"A\" && str[i] <= \"Z\"){\r\n          newStr = newStr + str[i].toLowerCase();\r\n        }else if (str[i] === \" \") {\r\n          newStr = newStr + \" \";\r\n        }\r\n        props.callAlert(\"sucess\", \"Text has been Inversed\")\r\n\r\n      } return newStr;\r\n    }\r\n    \r\n  return (\r\n    \r\n    <div>\r\n        <div className=\"mb-3 container my-3\">\r\n        <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">{props.heading}</label>\r\n        <textarea onChange={(e)=>{setText(e.target.value)}} value={text} className={`form-control bg-${props.mode} text-${props.mode === \"light\"? \"dark\":\"light\"}`} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n        <button className='btn btn-primary my-2' onClick={()=>{setText(newText); props.callAlert(\"sucess\", \"Text Converted to Upper Case\")}}>To UpperCase</button>\r\n        <button className='btn btn-primary my-2 mx-1' onClick={()=>{setText(\"\");  props.callAlert(\"sucess\", \"Text Has Been Cleared!\") }}>To Clear</button>\r\n        <button className='btn btn-primary my-2 mx-1' onClick={()=>{setText(newTextLower); props.callAlert(\"sucess\", \"Text converted to Lower Case!\") }}>To LowerCase</button>\r\n        <button className='btn btn-primary my-2 mx-1' onClick={()=>{setText(inverseCase(text)); props.callAlert(\"sucess\", \"Text Has Been Invered!\")}}>To Inverse</button>\r\n        <button className='btn btn-primary my-2 mx-1' onClick={copyToClipboard}>Copy To Clipboard</button>\r\n    \r\n    </div>\r\n    <div className=\"container\">\r\n      <h1>Your Text Summary</h1>\r\n      <p>Words are: {text.trim().split(/\\s/g).filter(word => word.length > 0).length} & Characters are: {text.length}</p>\r\n      <h2>Reading Time Required</h2>\r\n      <p>Minutes: {(text.trim().split(/\\s/g).filter(word => word.length > 0).length * 0.008)}</p>\r\n      <h2>The Preview of The Text:</h2>\r\n      <p>{!(text.length < 1)? text :\"Enter Text To For Preview\"  }</p>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTextBox.propTypes = {\r\n    heading: PropTypes.string\r\n};\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n const capitalize = (word)=>{\r\n    const str = word.toLowerCase();\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n }\r\n \r\n    return (\r\n    \r\n      props.message && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{capitalize(props.message.type)}:</strong> {props.message.message}\r\n    </div>\r\n  )\r\n}\r\n"," import React from 'react';\n import { useState } from 'react';\nimport './App.css';\nimport About from './components/About'\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  \n} from \"react-router-dom\";\n\n\n\nimport Navbar from './components/Navbar';\nimport TextBox from './components/TextBox';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [mAlert, setMAlert] = useState(null)\n  \n  function callAlert(type, message){\n    setMAlert({\n      type: type,\n      message: message\n    });\n    setTimeout(()=>{setMAlert(null)}, 2000)\n    \n  }\n\n  const toggleMode = () => {\n    mode === \"light\"\n    ? (()=>{\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      document.body.style.color = \"white\";\n      callAlert(\"success\",\"Dark Mode Enabled\")\n      \n\n    })() \n    : (()=>{\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\"\n      callAlert(\"success\", \"Light Mode Enabled\")\n  \n\n\n    })()\n    \n  }\n  \n\n  return (\n    <Router>\n        <Navbar title=\"TextMaster\" home=\"Home\" mode={mode} toggleMode={toggleMode}/>\n        <Alert message={mAlert}/>\n        \n        <div className=\"container\">\n          <Routes>\n            <Route path='/' element={<TextBox callAlert={callAlert} heading=\"Input Text to Work on\" mode={mode} />} />\n            <Route path='/about' element={<About />} />\n\n\n          </Routes>\n\n\n        </div>\n        \n\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}